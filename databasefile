/* This program is an example used to illustrate how JDBC works.
 ** It uses the JDBC driver for MySQL.
 **
 ** This program was written by nikos dimitrakas
 ** on Friday 2007-08-31
 ** for use in the basic database courses at DSV.
 **
 ** There is no error management in this program.
 ** Instead an exception is thrown. Ideally all exceptions
 ** should be caught and managed appropriately. But this
 ** program's goal is only to illustrate the basic JDBC classes.
 **
 ** 
 */

package db;

import java.rmi.RemoteException;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import marketplace.Item;
import marketplace.ItemInterface;
import marketplace.SellItem;
import marketplace.WishItem;


public class Database
{

    // DB connection variable
    static protected Connection con;
    // DB access variables
    private String URL = "jdbc:mysql:///marketplace";
    private String driver = "com.mysql.jdbc.Driver";
    private String userID = "root";
    private String password = "Homework";

    // method for establishing a DB connection
    public void connect()
    {
        try
        {
            // register the driver with DriverManager
            Class.forName(driver);
            //create a connection to the database
            con = DriverManager.getConnection(URL, userID, password);
            // Set the auto commit of the connection to false.
            // An explicit commit will be required in order to accept
            // any changes done to the DB through this connection.
            //con.setAutoCommit(false);
        }
        catch (Exception e)
        {
        	e.printStackTrace();
        	System.out.println("Felaktiga inloggningsuppgifter");
        	System.exit(0);
        }
    }


public void simpleselect() throws Exception
    {
        // Local variables
        String query;
        ResultSet rs;
        Statement stmt;

        // Set the SQL statement into the query variable
        query = "SELECT marke FROM bil GROUP BY marke";

        // Create a statement associated to the connection con.
        // The new statement is placed in the variable stmt.
        stmt = con.createStatement();

        // Execute the SQL statement that is stored in the variable query
        // and store the result in the variable rs.
        rs = stmt.executeQuery(query);

        System.out.println("\nResultatet (bilmarken):");
        understryk('-', 25);

        // Loop through the result set and print the results.
        // The method next() returns false when there are no more rows.
        while (rs.next())
        {

            System.out.println("Bil marke: " + rs.getString("marke"));

        }
        understryk('-', 25);
        // Close the variable stmt and release all resources bound to it
        // Any ResultSet associated to the Statement will be automatically closed too.
        stmt.close();
    }

     public void parameterizedselect() throws Exception
    {
        // Local variables
        String query;
        ResultSet rs;
        PreparedStatement stmt;
        String stadparam;

        // Create a Scanner in order to allow the user to provide input.
        java.util.Scanner in = new java.util.Scanner(System.in);

        // This is the old way (Java 1.4 or earlier) for reading user input:
        // Create a BufferedReader in order to allow the user to provide input.
        // java.io.BufferedReader in = new java.io.BufferedReader(new java.io.InputStreamReader(System.in));


        System.out.print("\nFor att se alla bilar som ags av nagon som bor i en viss stad.");
        // Ask the user to specify a value for Märke.
        System.out.print("\nAnge en stad: ");
        // Retrieve the value and place it in the variable markeparam.
        stadparam = in.nextLine();

        // Set the SQL statement into the query variable
        query = "SELECT regnr, marke, farg FROM bil WHERE agare IN (SELECT id FROM person WHERE stad = ?)";

        // Create a statement associated to the connection and the query.
        // The new statement is placed in the variable stmt.
        stmt = con.prepareStatement(query);

        // Provide the value for the first ? in the SQL statement.
        // The value of the variable markeparam will be sent to the database manager
        // through the variables stmt and con.
        stmt.setString(1, stadparam);

        // Execute the SQL statement that is prepared in the variable stmt
        // and store the result in the variable rs.
        rs = stmt.executeQuery();

        System.out.println("\nResultatet (Bilar som ags av nagon som bor i " + stadparam + "):");
        understryk('-', 53);

        // Loop through the result set and print the results.
        // The method next() returns false when there are no more rows.

        if(rs.next()!= true)
        {
            System.out.println(" Finns ingen bil registrerad i " + stadparam + " (eller staden finns inte i databasen)" );
        }

        else
        {
            // Loop through the result set and print the results.
            // The method next() returns false when there are no more rows.
            while (rs.next())
            {
                System.out.println(rs.getString("regnr") + " " + rs.getString("marke") + " " + rs.getString("farg"));
            }

        }
     // Close the variable stmt and release all resources bound to it
        // Any ResultSet associated to the Statement will be automatically closed too.
        understryk('-', 53);
        stmt.close();
    }
    public void insert() throws Exception
    {
        // Local variables
        String query;
        PreparedStatement stmt;
        String username;
        String password;


        // Create a Scanner in order to allow the user to provide input.
        java.util.Scanner in = new java.util.Scanner(System.in);
        System.out.print("\nTo create a user");
        // Ask the user to specify a value for förnamn.
        System.out.print("\nWrite an username: ");
        // Retrieve the value and place it in the variable fnamnparam.
        username = in.nextLine();

        // Ask the user to specify a value for efternamn.
        System.out.print("Write a password: ");
        // Retrieve the value and place it in the variable enamnparam.
        password = in.nextLine();

        // Set the SQL statement into the query variable
        query = "INSERT INTO user(name, passwd) VALUES (?, ?)";

        // Create a statement associated to the connection and the query.
        // The new statement is placed in the variable stmt.
        stmt = con.prepareStatement(query);

        // Provide the values for the ?'s in the SQL statement.
        // The value of the variable fnamnparam is the first,
        // enamnparam is second and stadparam is third.
        stmt.setString(1, username);
        stmt.setString(2, password);

        // Execute the SQL statement that is prepared in the variable stmt
        stmt.executeUpdate();
        understryk('-', 53);
        // Close the variable stmt and release all resources bound to it
        stmt.close();
    }

    public static void understryk(char tecken, int antal)
    {
        //Upprepa detta ett givet antal gånger
        for (int i = 0; i < antal; i++)
        {
            System.out.print(tecken);
        }

        System.out.println();
    }

    public static void main(String[] argv) throws Exception
    {
        // Create a new object of this class.
        Database db = new Database();

        // Call methods on the object t.
        db.connect();
        db.insert();


        // Commit the changes made to the database through this connection.
        // con.commit();
        // Close the connection.
        con.close();
    }


	public boolean userExist(String name, String password) throws SQLException {
		
		// Local variables
        String query;
        ResultSet rs;
        PreparedStatement stmt;
        
        // Set the SQL statement into the query variable
        query = "SELECT passwd FROM user WHERE name = ?";
        
        // Create a statement associated to the connection and the query.
        // The new statement is placed in the variable stmt.
        stmt = con.prepareStatement(query);
        
        // Provide the value for the first ? in the SQL statement.
        // The value of the parameter name will be sent to the database manager
        // through the variables stmt and con.
        stmt.setString(1, name);
        
        // Execute the SQL statement that is prepared in the variable stmt
        // and store the result in the variable rs.
        rs = stmt.executeQuery();
        
        if(!rs.next()) 
            return false;
        else {
        	if (rs.getString("passwd").equals(password))
        		return true;
        }
		
		return false;
	}


	public void createUser(String name, String password) throws SQLException {
		// Local variables
        String query;
        PreparedStatement stmt;
        
        // Set the SQL statement into the query variable
        query = "INSERT INTO user(name, passwd) VALUES (?, ?)";
        
        // Create a statement associated to the connection and the query.
        // The new statement is placed in the variable stmt.
        stmt = con.prepareStatement(query);
        
        // Provide the values for the ?'s in the SQL statement.
        // The value of the parameter name is the first,
        // the parameter password is second.
        stmt.setString(1, name);
        stmt.setString(2, password);
        
        // Execute the SQL statement that is prepared in the variable stmt
        stmt.executeUpdate();
        
        // Close the variable stmt and release all resources bound to it
        stmt.close();
		
	}


	public void deleteUser(String name, String password) throws SQLException {
		
		// Local variables
        String query;
        PreparedStatement stmt;
        
        // Set the SQL statement into the query variable
        query = "DELETE FROM user WHERE name = ?";
        
        // Create a statement associated to the connection and the query.
        // The new statement is placed in the variable stmt.
        stmt = con.prepareStatement(query);
        
        // Provide the values for the ?'s in the SQL statement.
        // The value of the parameter name is replacing the ?.
        stmt.setString(1, name);
        
        // Execute the SQL statement that is prepared in the variable stmt
        stmt.executeUpdate();
        
        // Close the variable stmt and release all resources bound to it
        stmt.close();
		
	}


	public void addItem(String customer, String itemName, float price, int type) throws SQLException {
		// Local variables
        String query;
        PreparedStatement stmt;
        
        // Set the SQL statement into the query variable
        query = "INSERT INTO item(name, price, customer, type) VALUES (?, ?, ?, ?)";
        
        // Create a statement associated to the connection and the query.
        // The new statement is placed in the variable stmt.
        stmt = con.prepareStatement(query);
        
        // Provide the values for the ?'s in the SQL statement.
        stmt.setString(1, itemName);
        stmt.setFloat(2, price);
        stmt.setString(3, customer);
        stmt.setInt(4, type);
        
        // Execute the SQL statement that is prepared in the variable stmt
        stmt.executeUpdate();
        
        // Close the variable stmt and release all resources bound to it
        stmt.close();
		
	}


	@SuppressWarnings("unchecked")
	public List readAllItems(int type) throws SQLException, RemoteException {
		// Local variables
        String query;
        PreparedStatement stmt;
        ResultSet rs;
        List items = null;
        
        // Set the SQL statement into the query variable
        query = "SELECT * FROM item WHERE type = ?";
        
        // Create a statement associated to the connection and the query.
        // The new statement is placed in the variable stmt.
        stmt = con.prepareStatement(query);
        
        // Provide the values for the ?'s in the SQL statement.
        // The value of the parameter name is the first,
        // the parameter password is second.
        stmt.setInt(1, type);
        
        // Execute the SQL statement that is prepared in the variable stmt
        // and store the result in the variable rs.
        rs = stmt.executeQuery();
        
        if (type == 1)
        	items = new ArrayList<SellItem>();
        else if (type == 2)
        	items = new ArrayList<WishItem>();
    	while (rs.next()) {
    		items.add(new SellItem(rs.getString("name"), rs.getFloat("price")));
        }
        
    	return items;
	}
}
